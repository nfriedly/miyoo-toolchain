// Generated by gmmproc 2.54.0 -- DO NOT MODIFY!
#ifndef _GIOMM_SIMPLEACTIONGROUP_H
#define _GIOMM_SIMPLEACTIONGROUP_H

#include <giommconfig.h>


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2011 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <giomm/actionmap.h>
#include <giomm/actiongroup.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GSimpleActionGroup = struct _GSimpleActionGroup;
using GSimpleActionGroupClass = struct _GSimpleActionGroupClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gio
{ class SimpleActionGroup_Class; } // namespace Gio
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gio
{

class Action;

/** SimpleActionGroup - A simple ActionGroup implementation.
 * SimpleActionGroup is a hash table filled with Action objects, implementing
 * the ActionGroup interface.
 *
 * @newin{2,32}
 */

class SimpleActionGroup : public Glib::Object,
                          public ActionGroup,
                          public ActionMap
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = SimpleActionGroup;
  using CppClassType = SimpleActionGroup_Class;
  using BaseObjectType = GSimpleActionGroup;
  using BaseClassType = GSimpleActionGroupClass;

  // noncopyable
  SimpleActionGroup(const SimpleActionGroup&) = delete;
  SimpleActionGroup& operator=(const SimpleActionGroup&) = delete;

private:  friend class SimpleActionGroup_Class;
  static CppClassType simpleactiongroup_class_;

protected:
  explicit SimpleActionGroup(const Glib::ConstructParams& construct_params);
  explicit SimpleActionGroup(GSimpleActionGroup* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  SimpleActionGroup(SimpleActionGroup&& src) noexcept;
  SimpleActionGroup& operator=(SimpleActionGroup&& src) noexcept;

  ~SimpleActionGroup() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GSimpleActionGroup*       gobj()       { return reinterpret_cast<GSimpleActionGroup*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GSimpleActionGroup* gobj() const { return reinterpret_cast<GSimpleActionGroup*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GSimpleActionGroup* gobj_copy();

private:

  
protected:
  SimpleActionGroup();

public:
  
  /** Creates a new, empty, SimpleActionGroup.
   * 
   * @newin{2,28}
   * 
   * @return A new SimpleActionGroup.
   */

  
  static Glib::RefPtr<SimpleActionGroup> create();


#ifndef GIOMM_DISABLE_DEPRECATED

  /** Looks up the action with the name @a action_name in the group.
   * 
   * If no such action exists, returns <tt>nullptr</tt>.
   * 
   * @newin{2,28}
   * 
   * Deprecated: 2.38: Use g_action_map_lookup_action()
   * 
   * @deprecated Use ActionMap::lookup_action() instead
   * 
   * @param action_name The name of an action.
   * @return A Action, or <tt>nullptr</tt>.
   */
  Glib::RefPtr<Action> lookup(const Glib::ustring& action_name);
#endif // GIOMM_DISABLE_DEPRECATED


#ifndef GIOMM_DISABLE_DEPRECATED

  /** Looks up the action with the name @a action_name in the group.
   * 
   * If no such action exists, returns <tt>nullptr</tt>.
   * 
   * @newin{2,28}
   * 
   * Deprecated: 2.38: Use g_action_map_lookup_action()
   * 
   * @deprecated Use ActionMap::lookup_action() instead
   * 
   * @param action_name The name of an action.
   * @return A Action, or <tt>nullptr</tt>.
   */
  Glib::RefPtr<const Action> lookup(const Glib::ustring& action_name) const;
#endif // GIOMM_DISABLE_DEPRECATED


#ifndef GIOMM_DISABLE_DEPRECATED

  /** Adds an action to the action group.
   * 
   * If the action group already contains an action with the same name as
   *  @a action then the old action is dropped from the group.
   * 
   * The action group takes its own reference on @a action.
   * 
   * @newin{2,28}
   * 
   * Deprecated: 2.38: Use g_action_map_add_action()
   * 
   * @deprecated Use ActionMap::add_action() instead
   * 
   * @param action A Action.
   */
  void insert(const Glib::RefPtr<Action>& action);
#endif // GIOMM_DISABLE_DEPRECATED


#ifndef GIOMM_DISABLE_DEPRECATED

  /** Removes the named action from the action group.
   * 
   * If no action of this name is in the group then nothing happens.
   * 
   * @newin{2,28}
   * 
   * Deprecated: 2.38: Use g_action_map_remove_action()
   * 
   * @deprecated Use ActionMap::remove_action() instead
   * 
   * @param action_name The name of the action.
   */
  void remove(const Glib::ustring& action_name);
#endif // GIOMM_DISABLE_DEPRECATED


   // deprecated


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gio


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gio::SimpleActionGroup
   */
  Glib::RefPtr<Gio::SimpleActionGroup> wrap(GSimpleActionGroup* object, bool take_copy = false);
}


#endif /* _GIOMM_SIMPLEACTIONGROUP_H */

